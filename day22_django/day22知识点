day22 http://www.cnblogs.com/wupeiqi/articles/5246483.html

知识点概要
    - Session
    - CSRF
    - Model操作
    - Form验证（ModelForm）
    - 中间件
    - 缓存
    - 信号


内容详细：

1. Session
	基于Cookie做用户验证时：敏感信息不适合放在cookie中
	

    a. Session原理
		Cookie是保存在用户浏览器端的键值对
		Session是保存在服务器端的键值对
	
    b. Cookie和Session对比
    
    c. Session配置(缺少cache)
    
    d. 示例：实现两周自动登陆
            - request.session.set_expiry(60*10)
            - SESSION_SAVE_EVERY_REQUEST = True

    PS: cookie中不设置超时时间，则表示关闭浏览器自动清除
	
	
	- session依赖于cookie
	- 服务器session
		request.session.get()
		request.session[x] = x
		
		request.session.clear()
		
	- 配置文件中设置默认操作（通用配置）：
		SESSION_COOKIE_NAME ＝ "sessionid"                       # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）
		SESSION_COOKIE_PATH ＝ "/"                               # Session的cookie保存的路径（默认）
		SESSION_COOKIE_DOMAIN = None                             # Session的cookie保存的域名（默认）
		SESSION_COOKIE_SECURE = False                            # 是否Https传输cookie（默认）
		SESSION_COOKIE_HTTPONLY = True                           # 是否Session的cookie只支持http传输（默认）
		SESSION_COOKIE_AGE = 1209600                             # Session的cookie失效日期（2周）（默认）
		SESSION_EXPIRE_AT_BROWSER_CLOSE = False                  # 是否关闭浏览器使得Session过期（默认）
		# set_cookie('k',123)
		SESSION_SAVE_EVERY_REQUEST = False                       # 是否每次请求都保存Session，默认修改之后才保存（默认）

	- 引擎的配置
	     SESSION_ENGINE = 'django.contrib.sessions.backends.cache'  # 引擎
         SESSION_CACHE_ALIAS = 'default'                            # 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置

2. CSRF （Cross-site request forgery）跨站请求伪造
    a. CSRF原理

    b. 无CSRF时存在隐患

    c. Form提交（CSRF）
        form表单中，使用{% csrf_token %} 即可，此时就会生成一个input标签带有一个随机字符串，同时在cookie里面也会产生一个csrftoken的字符串
    d. Ajax提交（CSRF）
       添加CSRF请求头，对应的key为 X-CSRFToken
       1. 在单次ajax请求中添加header
       2. 添加全局的ajax的方法，在单次ajax请求的时候优先执行该方法

	   $(function(){
            //$.ajaxSetup为所有整个页面的all ajax添加csrf请求header
            // 发送ajax请求的时候会优先执行，是一个全局的配置，不用在调用ajax的每个请求添加header，例如btn1和btn2的header就可以注释掉
            // 建议使用
            $.ajaxSetup({
                beforeSend: function(xhr,settings){ //xhr就是XMLHttpRequest,底层的发送ajax请求的对象
                    xhr.setRequestHeader('X-CSRFtoken', $.cookie('csrftoken'));
                }
            });

            $('#btn1').click(function () {
                $.ajax({
                    url: '/login/',
                    type:"POST",
                    data: {'user': 'root', 'pwd': '123'},
                     // 发送请求的时候，发送一个带有csrftoken的header
                    //  setting中是HTTP_X_CSRFTOKEN,其中HTTP_是django添加的，所以我们只需要传递X_CSRFTOKEN
                    //  但是X_CSRFTOKEN中的下划线，在header中是非法的，所以只能使用X-CSRFtoken
                    //  如果ajax请求太多，这种太麻烦，可以采用$.ajaxSetup为所有整个页面的all ajax添加csrf请求header
                    // headers: {'X-CSRFtoken': $.cookie('csrftoken')},
                    success:function(arg){

                    }
                })
            });

             $('#btn2').click(function () {
                $.ajax({
                    url: '/login/',
                    type:"POST",
                    data: {'user': 'root', 'pwd': '123'},
                     // 发送请求的时候，发送一个带有csrftoken的header
                    //  setting中是HTTP_X_CSRFTOKEN,其中HTTP_是django添加的，所以我们只需要传递X_CSRFTOKEN
                    //  但是X_CSRFTOKEN中的下划线，在header中是非法的，所以只能使用X-CSRFtoken
                    //  如果ajax请求太多，这种太麻烦，可以采用$.ajaxSetup为所有整个页面的all ajax添加csrf请求header
                    // headers: {'X-CSRFtoken': $.cookie('csrftoken')},
                    success:function(arg){

                    }
                })
            });
        })
	   
6. 中间件[http://www.cnblogs.com/wupeiqi/articles/5237704.html]
    a. 创建一个中间件类class row1
    b. 在setting中进行注册
    中间件中可以定义四个方法，分别是：
    process_request(self,request)
    process_view(self, request, callback, callback_args, callback_kwargs)
    process_template_response(self,request,response)
    process_exception(self, request, exception)
    process_response(self, request, response)
    以上方法的返回值可以是None和HttpResonse对象，如果是None，则继续按照django定义的规则向下执行，如果是HttpResonse对象，则直接将该对象返回给用户

7. 缓存[http://www.cnblogs.com/wupeiqi/articles/5246483.html]
   缓存的使用【http://www.cnblogs.com/wupeiqi/articles/5132791.html】
	5种配置
	3种应用：
		全局
		视图函数
		模板

8. 信号【http://www.cnblogs.com/wupeiqi/articles/5246483.html】
    - 内置信号
	- 自定义
		 - 定义信号
		 - 出发信号
		 - 信号中注册函数
	
3. Model操作
    
    a. 字段类型 + 参数

    b. 连表字段 + 参数

    c. Meta

    d. SQL操作：
        - 基本增删改查
        - 进阶操作
        - 正反查询
        - 其他操作

    e. 验证（弱）

4. Form操作 【http://www.cnblogs.com/wupeiqi/articles/6144178.html】
	完成：
		- 验证用户请求
		- 生成HTML
		  （保留上一次提交的数据）
		
	自定义：
		- 类
		- 字段（校验）
		- 插件（生成HTML）
		
	初始化操作：
		
	
	
============= 作业:xxxoo管理 =============
用户验证：session
新URL：Form验证
中间件：IP过滤
信号：记录操作
CSRF：
	
	
	
	
	
	
	
	
	
	
	
    a. Form验证用户请求

    b. Form生成HTML

    c. Form字段详细（自定义字段，Model...） + 插件

    d. 自定义验证(钩子以及__all__)

    e. 注册示例：
         用户名、密码、邮箱、手机号（RegexValidator或RegexField）、性别、爱好、城市
    
    f. 初始化值

5. ModelForm

    a. Model+Form功能集合

    b. save

    c. save + save_m2m













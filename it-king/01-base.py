# Author: Peter
# 1.数字
# 整数，不区分long和int
#     进制0xa,0o10,0b10
#     bool,2个值True,False
# 浮点数
#     1.2,1.46e9等价于1.46 * 10的9次方
# 复数,1+2j
# 字符串
#   使用' " 单双引号引用的字符的序列
#   ''' 和 """ 单双3三引号，可以跨行、可以在其中自由的使用单双引号
#   在字符串前面加上r 或者 R 前缀，表示该字符串不做特殊的处理
#
#
# 2.基础语法
# 1. 转义字符
#     1.1 \\ \t \r \n \' \"
#     1.2 前缀r,把里面的所有字符当普通字符对待
# 2. 缩进
#     2.1 未使用C等语言的花括号，而是采用缩进的方式表示层次关系
#     2.2 约定使用4个空格缩进
# 3. 续行
#     3.1 在行尾使用 \
#     3.2 如果使用各种括号，认为括号内是一个整体，内部跨行不用 \
#
#
# 3.标识符
#     1. 一个名字，用来指代一个值
#     2. 只能字母，下划线和数字
#     3. 只能以字母或下划线开头
#     4. 不能是python的关键字，例如def，class就不能作为标识符
#     5. Python是大小写敏感的
#     约定：
#         不允许使用中文
#         不允许使用歧义单词，例如class_
#         在python中，不要随便使用下划线开头的表示符
#
# 4.
#  常量
#      一旦赋值就不能改变值的标识符
#      python中无法定义常量
#  字面常量
#       一个单独的量，例如12，"abc",'22222'
#  变量
#       赋值后，可以改变值的标识符
#
#
# 5.python的语言类型
#   python是动态语言、强类型语言
#   静态编译语言
#       实现声明变量类型，类型不能再改变
#       编译时检查
#   动态编译语言
#       不用事先声明类型，随时可以赋值为其他类型
#        编程是不知道是什么类型，很难推断
#   强类型语言
#       不同类型之间操作，必须先强制类型转换为同一类型。print('a'+1)
#   弱类型语言
#       不同类型间可以操作，自动隐式转换,javascript中console.log(1+'a')
#   static & strong: C# java F# scala haskel
#   static & weak: c c++
#   dynamic & strong: erlang groovy clojure ruby python magik
#   dynamic & weak: perl vb php javascript


# 6.运算符
# 6.1 算数运算符
#   6.1.1   + - *  / % **
#   6.1.2   自然除/结果是浮点数，整除//.注：2.x中 /和// 都是整除
# 1/2 = 0.5(自然除)  1//2 =0 （python3.0整除）
#
# 6.2 位运算符
#   6.2.1 & 1 ~(取反) ^(异或) << >>
#   6.2.2 常用方式：乘除2的倍数，32//4 相当于 32 >> 2
#   6.2.3 12 0xc,0o14,0b1100
#          ~12 等于多少，为什么？
#      bin(12) 二进制显示
#
# 6.3 原码、反码、补码、负数表示法
# 高位0 是整数， 高位1是负数
# -1 原码 1000 0001
# -1 补码 1111 1111
# 原码（补码的补码）
#     5=>0b101,1=>0b1,-1=>-0b1,bin(-1)
# 反码
#     正数的反码与原码相同，负数的反码符号位不变其余按位取反
# 补码
#     正数的补码与原码相同；负数的补码符号位不变其余按位取反后+1
# 负数表示法
#     数字电路中的CPU中的运算器实现了加法器，但是没有减法器，减法器是转换成加法
#     负数在计算机中使用补码存储，-1的补码为1111 1111
#     5-1 => 5+（-1）直觉上是0b101-0b1,其实计算机中是0b101 + 0b11111111,溢出位舍弃
#     ~12为什么是-13?
#     0000 1100
#     1111 0011 取反
#     1000 1101 原码（补码的补码）
#     (异或例子)10^9等于?   10^-9等于？ 为什么
# 6.4 比较运算符
#      ==   ！=  > < >= <=
#      返回一个bool值
#      1<'1' 1=='1'
#      链式比较操作符
#         4>3>2  4>mynumber>=1
# 6.5 逻辑运算符
#       与或非 and or not
#       短路运算符
#           and 如果第一个表达式为 False,后面就没有必要计算了，这个逻辑表达式一个是False
#           or  如果第一个表达式为 True,后面就没有必要计算了，这个逻辑表达式一定是 True
# 6.6 赋值运算符
#       a = min(3,5)
#       += -= *=  /= %=等
#       x = y = z = 10很少用
# 6.7 成员运算符
#     in 、 not in
# 6.8 身份运算符
#     is 、 is not
#
#
#  str(1),bin(-1)
#
#
#
# 7 内置数据结构
# 7.1 数值型
#       int float complex bool
#    类型转换（内置）
#    int(x) 返回一个整数
#    float(x) 返回一个浮点数
#    complex(x),complex(x,y)返回一个复数
#    bool(x) 返回布尔值
# 7.2 序列对象
#       字符串str
#       列表list
#       tuple
# 7.3 键值对
#       集合set
#       字典dict

页面布局
布局一：
<div class="pg_header">
    <div style="width:980px;margin:0 auto">
        内容自动居中
    </div>
</div>
<div class="pg_content"></div>
<div class="pg_footer"></div>

后台布局
    postion:
        fixed    -- 永远固定在窗口的某个位置
        relative -- 单独无意义
        absolute -- 第一次定位，可以在指定位置，滚轮滚动时，不在了。。。
    a:  左侧菜单跟随滚动条
    b:  左侧及以上不动   *******

================= 1. 以函数作为作用域（除了let）[http://www.cnblogs.com/wupeiqi/p/5649402.html]============================
其他语言：以块为作用域
python: 以函数作为作用域
情况一：
    def func:
        if 1==1:
            name="Whisper"
        print(name)
    func()
情况二：
    def func:
        if 1==1:
            name="Whisper"
        print(name)
    func()
    print(name) // 报错
JS：    以函数作为作用域
    function func(){
        if(1===1){
            var name="Thunder";
        }
        console.log(name);
    }
    func();

================= 2. 函数的作用域在函数未被调用之前，已经创建============================

    function func(){
        if(1===1){
            var name="Thunder";
        }
        console.log(name);
    }
    func();


================= 3. 函数的作用域存在作用域链，并且也是在被调用之前创建============================
   == 实例1
    name = "Whisper"
    function func(){
        var name ="Thunder"
        function inner(){
            var name ="Misty"
            console.log(name);
        }
        inner();
    }
    func(); // Misty


    ==实例2.作用域链在调用之前已经创建
    name = "Whisper"
    function func(){
        var name ="Thunder"
        function inner(){
            console.log(name);
        }
        return inner;
    }
    var ret = func();
    ret();  // 输出Thunder，作用域链在调用之前已经创建


    ===实例3.
    name = "Whisper"
    function func(){
        var name ="Thunder"
        function inner(){
            console.log(name);
        }
        var name = "Misty";
        return inner;
    }
    var ret = func();
    ret();  // Misty


    ==============================4. 函数内局部变量，声明提前================================
     == 1.
     function func(){
        console.log(name); // 报错，在JavaScript中如果不创建变量，直接去使用，则报错
     }
     func();
    == 2.
    JavaScript中如果创建值而不赋值，则该值为 undefined
    var xxoo;
    console.log(xxoo); // 输出：undefined
    == 3.
    function func(){
        console.log(name); // undefined，JavaScript的函数在被执行之前，会将其中的变量全部声明，而不赋值，所以，函数在“预编译”时，已经执行了var name；所以上述代码中输出的是undefined
        var name="Flash";
    }
    func();


14. Javascript面向对象
     a、this代指对象(python self)
     b、创建对象时，new 函数()

     c、 为了解决资源浪费，可以用原型prototype

     function foo(){
        var name="whisper"
     }
     foo();

=====
     function Foo(name){
        this.name = name;
        this.sayName = function(){
            console.log(this.name);
        }
     }
     var obj1 = new Foo('Flash');
     obj1.name;
     obj1.sayName();

     var obj2 = new Foo('Misty');
     obj2.name;
     obj2.sayName();

    obj1 和 obj2在内存中有重复的sayName，需要进行改造，需要prototype

     a、this代指对象(python self)
     b、创建对象时，new 函数()

=== 原型prototype

    function Foo(name){
        this.name = name;
    }
    # Foo的原型
    Foo.prototype = {
        'sayName':function(){
            console.log(this.name);
        }
    }

     var obj1 = new Foo('Flash');
     obj1.name;
     obj1.sayName();

     var obj2 = new Foo('Misty');
     obj2.name;
     obj2.sayName();


DOM [http://www.cnblogs.com/wupeiqi/articles/5643298.html]
    查找
        直接查找
            var obj = document.getElementById('i1');
        间接查找
            文件内容操作
                innerText 仅文本
                innerHTML 获取所有的值
                value
                    input系列，获取当前input中的值,
                    select，获取选中的值  obj.selectedIndex
                    textarea 获取文本的值

                parentElement           // 父节点标签元素
                children                // 所有子标签
                firstElementChild       // 第一个子标签元素
                lastElementChild        // 最后一个子标签元素
                nextElementtSibling     // 下一个兄弟标签元素
                previousElementSibling  // 上一个兄弟标签元素

                搜索框实例

     操作
            样式操作：
                className
                classList
                    classList.add
                    classList.remove

                obj.style.fontSize='16px';
                obj.style.color="red";
            属性操作：
                obj.setAttribute('xxxx','Whisper');
                obj.removeAtrribute('value');
                obj.attributes

            创建标签，并添加到HTML中：
                a.字符串形式
                b.对象的方式
                    document.createElement('div')
            提交表单
                任何标签通过DOM都可以提交表单
                document.getElementById("form的id").submit();
            其他
                console.log()
                alert()
                var v = confirm(信息)   v为true 或者false

                location.href                                             获取当前的url
                location.href="http://www.baidu.com"                      重定向，跳转
                location.href=location.href      ==== > location.reload   页面刷新

                var obj = setInterval(function(){},5000)  每隔5秒执行一次,一直执行
                clearInterval(obj)                        清除定时器，终止执行

                var obj = setTimeout(function(){},5000)   定时器，只执行一次,5秒后执行
                clearTimeout(obj);                        清除定时器
     事件：
        onclick, onblur, onfocus

        行为，样式，结构相分离的页面?
        js   css   html

        绑定事件两种方式：
            a、直接标签绑定 onclick="xxxx();"
            b、先获取dom对象，然后进行绑定
                document.getElementById('xxx').onclick=function(){}

        this,当前触发事件的标签
            a、第一种绑定方式
                <input type="button" onclick="clickxxx(this)"/>
                function clickxxx(that){
                    that就是当前的this
                }
            b、第二种绑定方式
                <input id="xx" type="button" />
                document.getElementById('xx').onclick=function(){
                    // 此时的this代指的就是当前标签
                }
        作用域实例：
            var trs = document.getElementsByTagName("tr");
            for (var i = 0; i < trs.length; i++) {
                trs[i].onmouseover = function () {
                    this.style.backgroundColor = "blue";  // 此处使用this，而不是trs[i]
                };
                trs[i].onmouseout = function () {
                    this.style.backgroundColor = "";
                };
            }
